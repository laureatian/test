diff --git a/zj/a.out b/zj/a.out
index b9a1776..29977e7 100755
Binary files a/zj/a.out and b/zj/a.out differ
diff --git a/zj/discounts.cpp b/zj/discounts.cpp
index 2130097..b90f38f 100644
--- a/zj/discounts.cpp
+++ b/zj/discounts.cpp
@@ -164,7 +164,7 @@ int init() {
 
 int search_node(int node_value) {
     int ret = OK;
-    // if tree bottom is reached, current_path search ends  ###1
+    // if tree bottom is reached, current_path search ends  
     if (current_path.size() >= MAX_PATH) {   //###1
         return ret;
     }
@@ -178,13 +178,13 @@ int search_node(int node_value) {
         // check node status. prune or add to path
         need_prune = check_if_need_prune(discount_group,current_remaining_goods);
 
-        if(!need_prune) {
+        if(!need_prune) { // add_node_to_path
             ret = add_node_to_path(discount_group,current_remaining_goods,temp_vec); //###3
             if(!ret) {
                 return ret;
             }
         }
-        if(need_prune || current_path.size() == MAX_PATH) {            //###5
+        if(need_prune || current_path.size() == MAX_PATH) {            //###5  prune and UpdatePathAndRemainingGoods
 
             UpdatePathAndRemainingGoods();
         }
@@ -222,10 +222,10 @@ bool check_if_need_prune(const vector<string> &discount_group, const map<string,
 }
 
 int update_best_path(const vector<int> &current_path, vector<int> &current_best_path) {
-    current_best_path.clear();
     if(current_path.empty()) {
         return ERR;
     }
+    current_best_path.clear();
     for(int i = 0; i < current_path.size(); i ++) {
         current_best_path.push_back(current_path[i]);
     }
@@ -233,10 +233,10 @@ int update_best_path(const vector<int> &current_path, vector<int> &current_best_
 }
 
 int update_minimal_remaining_goods(const map<string,int> &current_remaining_goods, vector<string> &minimal_remaining_goods) {
-    minimal_remaining_goods.clear();
     if(current_remaining_goods.empty()) {
         return OK;
     }
+    minimal_remaining_goods.clear();
     for(map<string,int>::const_iterator iter = current_remaining_goods.begin(); iter != current_remaining_goods.end(); iter ++) {
         for(int k = 0; k < iter->second; k ++) {
             minimal_remaining_goods.push_back(iter->first);
@@ -246,10 +246,10 @@ int update_minimal_remaining_goods(const map<string,int> &current_remaining_good
 }
 
 int add_node_to_path(const vector<string> &discount_group, map<string,int> &current_remaining_goods, vector<string> &temp_vec) {
-    temp_vec.clear();
     if(discount_group.empty()) {
         return OK;
     }
+    temp_vec.clear();
     for(int i = 0; i < discount_group.size(); i ++) {
         map<string,int>::iterator iter = current_remaining_goods.find(discount_group[i]);
         if(iter ==  current_remaining_goods.end()) {
@@ -270,10 +270,10 @@ int trace_back_node(map<string,int> &current_remaining_goods, vector<string> &te
     if(path.empty()) {
         return ERR;
     }
-    path.pop_back();
     if(temp_vec.empty()) {
         return OK;
     }
+    path.pop_back();
 
     for(int i = 0; i < temp_vec.size(); i++) {
         if(current_remaining_goods.find(temp_vec[i]) != current_remaining_goods.end()) {
